name: deploy-sprint-release

on:
  issues:
    types: [opened, edited, reopened]

jobs:
  parse_issue:
    if: startsWith(github.event.issue.title, 'Sprint Release:')
    runs-on: ubuntu-latest
    outputs:
      release_branch: ${{ steps.parse.outputs.release_branch }}
      feature_branches: ${{ steps.parse.outputs.feature_branches }}
      target_branch: ${{ steps.parse.outputs.target_branch }}

    steps:
      - name: Show raw issue body
        run: |
          echo "===== ISSUE TITLE ====="
          echo "${{ github.event.issue.title }}"
          echo
          echo "===== ISSUE BODY ====="
          echo "${{ github.event.issue.body }}"

      - name: Parse fields
        id: parse
        run: |
          body="${{ github.event.issue.body }}"
          # Extract release branch (line starting with release/)
          release_branch=$(echo "$body" | grep -E '^release/' | head -n 1 || true)
          # Extract target branch (DEV, UAT, PROD)
          target_branch=$(echo "$body" | grep -E '^(DEV|UAT|PROD)$' || true)
          # Extract feature branches (lines starting with feature/)
          feature_branches=$(echo "$body" | grep -E '^feature/' || true)

          echo "release_branch=$release_branch" >> $GITHUB_OUTPUT
          echo "target_branch=$target_branch" >> $GITHUB_OUTPUT
          echo "feature_branches<<EOF" >> $GITHUB_OUTPUT
          echo "$feature_branches" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Display parsed values
        run: |
          echo "Parsed release branch: ${{ steps.parse.outputs.release_branch }}"
          echo "Parsed target branch: ${{ steps.parse.outputs.target_branch }}"
          echo "Parsed feature branches:"
          echo "${{ steps.parse.outputs.feature_branches }}"

  release-features:
    runs-on: ubuntu-latest
    needs: parse_issue
    env:
      release_branch: ${{ needs.parse_issue.outputs.release_branch }}
    steps:
      - name: Checkout repository
        run: |
          git init
          git remote add origin https://github.com/${{ github.repository }}.git
          git fetch --all
          git checkout ${{ needs.parse_issue.outputs.target_branch }}

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create release branch
        run: |
          git checkout -b $release_branch origin/${{ needs.parse_issue.outputs.target_branch }}

      - name: Merge feature branches into release branch
        id: release-features
        run: |
          feature_branches="${{ needs.parse_issue.outputs.feature_branches }}"
          echo "Merging feature branches into $release_branch"
          error_message=""
          for feature_branch in $feature_branches; do
              echo "Merging $feature_branch ..."
              git fetch origin $feature_branch
              if ! git merge --ff --squash origin/$feature_branch; then
                error_message+="Merge conflict while merging $feature_branch\n"
                git reset --merge
              else
                git commit -m "Merged feature branch $feature_branch"
              fi
          done

          echo "error_message=$error_message" >> $GITHUB_OUTPUT
          git push origin $release_branch

      - name: Fail if merge conflicts occurred
        if: ${{ steps.release-features.outputs.error_message != '' }}
        run: |
          echo -e "${{ steps.release-features.outputs.error_message }}"
          exit 1

  create-pull-request:
    runs-on: ubuntu-latest
    needs: [release-features, parse_issue]
    steps:
      - name: Create Pull Request with feature list in body
        run: |
          RELEASE_BRANCH="${{ needs.parse_issue.outputs.release_branch }}"
          TARGET_BRANCH="${{ needs.parse_issue.outputs.target_branch }}"
          REPO="${{ github.repository }}"
          TOKEN="${{ github.token }}"
          FEATURES="${{ needs.parse_issue.outputs.feature_branches }}"

          echo "Creating Pull Request from $RELEASE_BRANCH to $TARGET_BRANCH"

          # Build the PR body content dynamically
          body="### Included Feature Branches:\n"
          if [ -z "$FEATURES" ]; then
            body+="(No feature branches detected)\n"
          else
            while IFS= read -r line; do
              body+="- ${line}\n"
            done <<< "$FEATURES"
          fi

          body+="\n\n_This PR was auto-generated by deploy-sprint-release workflow._"

          # Create the PR using GitHub REST API
          pr_data=$(curl -s -X POST \
            -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/$REPO/pulls \
            -d "$(jq -n \
                  --arg title "Sprint Release: $RELEASE_BRANCH → $TARGET_BRANCH" \
                  --arg head "$RELEASE_BRANCH" \
                  --arg base "$TARGET_BRANCH" \
                  --arg body "$body" \
                  '{title: $title, head: $head, base: $base, body: $body}')")

          pr_number=$(echo "$pr_data" | jq -r '.number')

          if [ "$pr_number" = "null" ] || [ -z "$pr_number" ]; then
            echo "Failed to create PR. Response:"
            echo "$pr_data"
            exit 1
          fi

          echo "✅ Pull Request created successfully: #$pr_number"
